enum Period {
  hourly
  daily
  weekly
  total
}


type OptionContract @entity {
  id: Bytes! 
  address: Bytes
  asset: String
  isPaused : Boolean
}


type User @entity {
  id: Bytes! 
  address: Bytes!
  allTradesCount: Int
  allActiveTrades : Int
  allExpiredTrades : Int
  allExercisedTrades : Int
}

type Leaderboard @entity {
  id: String! 
  user: Bytes! 
  netPnL: BigInt!
  totalTrades : Int!
  payout : BigInt!
  volume : BigInt!
  timestamp : String!
}


type QueuedOptionData @entity {
  id: String! 
  optionContract : OptionContract!
  strike: BigInt
  totalFee: BigInt
  user : User
  state : Int
  isAbove : Boolean
  queueID : BigInt
  slippage : BigInt
  depositToken : String
  reason : String
}


type UserOptionData @entity {
  id: String! 
  optionContract : OptionContract!
  optionID: BigInt
  strike: BigInt
  totalFee: BigInt!
  user : User!
  creationTime : BigInt
  expirationPrice : BigInt
  payout : BigInt
  state : Int
  amount : BigInt!
  expirationTime : BigInt
  isAbove : Boolean
  depositToken : String
  queueID : BigInt
  settlementFee : BigInt
}


type ReferralData @entity {
  id: Bytes! 
  user : User!
  totalTradesReferred : Int!
  totalVolumeOfReferredTrades : BigInt!
  totalRebateEarned : BigInt!
  totalTradingVolume : BigInt!
  totalDiscountAvailed : BigInt!
}


type OptionStat @entity {
  id: String! 
  currentAbovePositions : BigInt!
  currentBelowPositions : BigInt!
  totalVolume : BigInt!
  totalSettlementFees : BigInt!
}


type TradingStat @entity {
  id: ID!
  profit: BigInt!
  loss: BigInt!
  profitCumulative: BigInt!
  lossCumulative: BigInt!
  longOpenInterest: BigInt!
  shortOpenInterest: BigInt!
  timestamp: Int!
  period: Period!
}


type UserStat @entity {
  id: ID!
  uniqueCount: Int!
  uniqueCountCumulative: Int!
  period: Period!
  timestamp: BigInt
}


type FeeStat @entity {
  id: ID!
  fee: BigInt!
  period: Period!
  timestamp: BigInt!
}


type VolumeStat @entity {
  id: ID!
  amount: BigInt!
  period: Period!
  timestamp: BigInt!
}